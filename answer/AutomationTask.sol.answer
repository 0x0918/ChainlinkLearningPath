// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.7;

import "@chainlink/contracts/src/v0.8/AutomationCompatible.sol";

contract AutomationTask is AutomationCompatible {
    
    uint256 public constant SIZE = 10;
    uint256 public constant MAXIMUM_HEALTH = 1000;
    uint256[SIZE] public healthPoint;
    uint256 public lastTimeStamp;
    uint256 public immutable interval;
    
    constructor(uint256 _interval) {
        for(uint i = 0; i < SIZE; i++) {
            healthPoint[i] = MAXIMUM_HEALTH;
        }
        lastTimeStamp = block.timestamp;
        interval = _interval;
    }

    function fight(uint256 fighter) public {
        if(healthPoint[fighter] >= 100) {
            healthPoint[fighter] -= 100;
        } else {
            healthPoint[fighter] = 0;
        }
    }

    function checkUpkeep(
        bytes memory /* checkData*/ 
    ) 
        public 
        view 
        override 
        returns (
            bool upkeepNeeded,
            bytes memory /*performData*/
        )
    {
        upkeepNeeded = false;
        
        uint256 currentInterval = block.timestamp - lastTimeStamp;
        for(uint256 i = 0; i < SIZE; i++) {
            if (healthPoint[i] < MAXIMUM_HEALTH && currentInterval > interval) {
                upkeepNeeded = true;
            }
        }
    }

    function performUpkeep(
        bytes memory /*performData*/
    ) 
        external 
        override 
    {
        for (uint256 i = 0;  i < SIZE; i++) {
            healthPoint[i] = MAXIMUM_HEALTH;
        }
    }
}