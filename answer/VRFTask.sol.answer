
// An example of a consumer contract that relies on a subscription for funding.

pragma solidity ^0.8.0;

import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";

contract VRFTask is VRFConsumerBaseV2 {
    VRFCoordinatorV2Interface immutable COORDINATOR;
    
    uint64 immutable s_subscriptionId;
    bytes32 immutable s_keyHash;
    uint32 constant CALL_BACK_LIMIT = 25000000;
    uint16 constant REQUEST_CONFIRMATIONS = 3;
    uint32 constant NUM_WORDS = 5;

    uint256[] public s_randomWords;
    uint256 public s_requestId;

    address s_owner;

    event ReturnedRandomness(uint256[] randomWords);

    modifier onlyOwner {
        require(msg.sender == s_owner);
        _;
    }

    constructor(
        uint64 _subscriptionId,
        address vrfCoordinator,
        bytes32 _keyHash
    ) VRFConsumerBaseV2(vrfCoordinator) {
        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);
        s_subscriptionId = _subscriptionId;
        s_keyHash = _keyHash;
        s_owner = msg.sender;
    }

    function requestRandomWords() external onlyOwner {
        s_requestId = COORDINATOR.requestRandomWords(
            s_keyHash,
            s_subscriptionId,
            REQUEST_CONFIRMATIONS,
            CALL_BACK_LIMIT,
            NUM_WORDS
        );
    }

    function fulfillRandomWords(uint256 requestId, uint256[] memory _randomWords)
        internal
        override
    {
        s_randomWords = shuffle(5, _randomWords);
        emit ReturnedRandomness(s_randomWords);
    }

    //https://gist.github.com/cleanunicorn/d27484a2488e0eecec8ce23a0ad4f20b
    function shuffle(
            uint size,
            uint[] memory entropy) 
        public 
        pure 
        returns (uint256[] memory) {
            uint[] memory result = new uint[](size);

            for (uint i = 0; i < size; i++) {
                result[i] = i + 1;
            }

            for (uint i = 0; i < size - 1; i++) {
                bytes32 random = keccak256(abi.encodePacked(entropy[i]));
                
                uint lastItem = size - 1;
                uint selectedItem = uint(random) % lastItem;

                uint temp = result[lastItem];
                result[lastItem] = result[selectedItem];
                result[selectedItem] = temp;

                lastItem--;
            }

            return result;
        } 
}